import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generate sample dataset (replace with your own dataset)
np.random.seed(42)
n_samples = 100
data = {
    'size_sqft': np.random.normal(2000, 500, n_samples),  # House size in square feet
    'bedrooms': np.random.randint(1, 6, n_samples),       # Number of bedrooms
    'age': np.random.normal(20, 10, n_samples),           # Age of the house in years
    'price': np.zeros(n_samples)                          # Target: house price
}
# Simulate house price as a function of features with some noise
for i in range(n_samples):
    data['price'][i] = (data['size_sqft'][i] * 150 + 
                        data['bedrooms'][i] * 20000 - 
                        data['age'][i] * 5000 + 
                        np.random.normal(0, 50000))
df = pd.DataFrame(data)

# Prepare features (X) and target (y)
X = df[['size_sqft', 'bedrooms', 'age']]
y = df['price']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train linear regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Make predictions
y_pred_train = model.predict(X_train_scaled)
y_pred_test = model.predict(X_test_scaled)

# Evaluate model
train_mse = mean_squared_error(y_train, y_pred_train)
test_mse = mean_squared_error(y_test, y_pred_test)
train_r2 = r2_score(y_train, y_pred_train)
test_r2 = r2_score(y_test, y_pred_test)

print("Training MSE: {:.2f}".format(train_mse))
print("Testing MSE: {:.2f}".format(test_mse))
print("Training R2: {:.2f}".format(train_r2))
print("Testing R2: {:.2f}".format(test_r2))
print("Model Coefficients:", dict(zip(X.columns, model.coef_)))
print("Intercept: {:.2f}".format(model.intercept_))

# Calculate size_sqft to achieve a predicted price of ~2 crore INR
target_price_usd = 2_00_00_000 / 83  # ≈ 2,40,963.86 USD
bedrooms = 4
age = 10

# Get scaler means and stds
means = scaler.mean_
stds = scaler.scale_
coef_size, coef_bedrooms, coef_age = model.coef_
intercept = model.intercept_

# Linear regression equation: price = (size_sqft * coef_size + bedrooms * coef_bedrooms + age * coef_age) + intercept
# Features are scaled: scaled_feature = (feature - mean) / std
# Solve for size_sqft: price = ((size_sqft - mean_size) / std_size) * coef_size + scaled_bedrooms * coef_bedrooms + scaled_age * coef_age + intercept
scaled_bedrooms = (bedrooms - means[1]) / stds[1]
scaled_age = (age - means[2]) / stds[2]
# Rearrange to solve for scaled_size_sqft
scaled_size_sqft = (target_price_usd - (scaled_bedrooms * coef_bedrooms + scaled_age * coef_age + intercept)) / coef_size
# Convert back to original scale
size_sqft = scaled_size_sqft * stds[0] + means[0]

# Predict price for the new house
new_house = pd.DataFrame([[size_sqft, bedrooms, age]], columns=['size_sqft', 'bedrooms', 'age'])
new_house_scaled = scaler.transform(new_house)
predicted_price = model.predict(new_house_scaled)
# Convert predicted price to INR (1 USD = 83 INR)
predicted_price_inr = predicted_price[0] * 83
print(f"New house features: Size = {size_sqft:.2f} sqft, Bedrooms = {bedrooms}, Age = {age} years")
print("Predicted price for new house: ₹{:.2f}".format(predicted_price_inr))

# Visualize actual vs predicted prices for test set
plt.figure(figsize=(8, 6))
plt.scatter(y_test * 83, y_pred_test * 83, color='blue', alpha=0.5, label='Predicted')
plt.plot([y_test.min() * 83, y_test.max() * 83], [y_test.min() * 83, y_test.max() * 83], 'r--', label='Ideal Fit')
plt.xlabel('Actual Price (₹)')
plt.ylabel('Predicted Price (₹)')
plt.title('Actual vs Predicted House Prices')
plt.legend()
plt.grid(True)
plt.savefig('house_price_prediction.png')
plt.close()
